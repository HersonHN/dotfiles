#!/usr/bin/env python2

from subprocess import Popen, PIPE, STDOUT
import re

def main():
  apps = get_apps()

  for row in apps:
    main_instance = row['alias']
    app_name = row['app']

    print 'App Name:', app_name.ljust(20), 'Main Instance:', main_instance

    instances = get_instances(app_name)
    instances_to_delete = [a for a in instances if a != main_instance]

    if len(instances_to_delete) > 0:
      print '\nInstances To Delete:'
      print '\n'.join(instances_to_delete) + '\n'
      delete_instances(instances_to_delete)


def is_instance(line):
  ## old domanin
  if (line.find('.now.sh') > -1):
    return True

  ## new domain
  if (line.find('.vercel.app') > -1):
    return True

  return False


def get_apps():
  output = command(['vercel', 'ls']).split('\n')
  output = filter(lambda line: is_instance(line), output)
  output = map(lambda line: re.split('\s+', line), output)
  output = map(lambda line: { 'app': line[1], 'alias': line[2] }, output)

  return output


def get_instances(app_name):
  if app_name == '':
    raise ValueError('App Name is empty')

  output = command(['vercel','ls', app_name]).split('\n')
  output = filter(lambda line: is_instance(line), output)
  output = map(lambda line: re.split('\s+', line), output)
  output = map(lambda line: line[2], output)

  return output


def delete_instances(instances_to_delete):
  for instance in instances_to_delete:
    delete_instance(instance)


def delete_instance(instance):
  if instance == '':
    raise ValueError('Instance is empty')

  print 'Deleting', instance

  output = command(['vercel', 'rm', '-y', instance])
  print output


def command(args, return_as_array=False):
  command = Popen(args, shell=False, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
  (output, status) = command.communicate()
  return output

main()
